{"success": true,"messages": [],"payload": {
  "dashboards": [
    {
      "PK_ID": 838,
      "FK_ID_USER": 1,
      "NAME": "Gatlytron Dashboard (Postgres)",
      "DESCRIPTION": null,
      "TAGS": null,
      "IS_SHARED": true,
      "JSON_SHARE_WITH_USERS": {},
      "JSON_SHARE_WITH_GROUPS": {},
      "JSON_EDITORS": {},
      "JSON_EDITOR_GROUPS": {},
      "ALLOW_EDIT_SETTINGS": false,
      "TIME_CREATED": 1755862696802,
      "LAST_UPDATED": 1756210396578,
      "IS_PUBLIC": false,
      "START_FULLSCREEN": false,
      "IS_DELETABLE": true,
      "IS_RENAMABLE": true,
      "IS_ARCHIVED": false,
      "VERSION_GROUP": "b8584d88-5cd1-4b62-9855-aa1f4e697eec",
      "VERSION": 0,
      "username": "admin",
      "widgets": [
        {
          "PK_ID": 2250,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_parameter",
          "X": 0,
          "Y": 0,
          "WIDTH": 63,
          "HEIGHT": 6,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": null,
          "TITLE_ALIGN": null,
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": null,
          "FGCOLOR": null,
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "description": null,
            "JSON_PARAMETERS": {
              "103": "simulation",
              "107": "interval",
              "108": "interval_unit",
              "209": "chart_type",
              "1088": "timeframe"
            },
            "addtotop": false,
            "showbutton": true,
            "buttonlabel": null,
            "checkpassword": false,
            "password": null,
            "JSON_AFFECTED_WIDGETS": {},
            "load_previous_values": true
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2251,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 12,
          "WIDTH": 31,
          "HEIGHT": 18,
          "TITLE": "Users Total Active",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.active\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d activeUsers\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats by\u003d[timegroup] activeUsers\u003dAVG(activeUsers)\r\n| chart \r\n\ttype \u003d param(chart_type)\r\n\tx\u003d timegroup\r\n\ty\u003d activeUsers\r\n\tshowaxes\u003dtrue\r\n\tshowlegend\u003dfalse\r\n\tstacked\u003dtrue\r\n\tpointradius\u003d1\r\n\t",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2252,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 30,
          "WIDTH": 31,
          "HEIGHT": 8,
          "TITLE": "Users: Total Started",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "left",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.total_started\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d usersTotalStarted\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats \r\n\tby\u003d[timegroup] \r\n\tusersTotalStarted\u003dAVG(usersTotalStarted)\r\n| chart \r\n\ttype \u003d \"sparkline\" \r\n\tx \u003d timegroup\r\n\ty \u003d usersTotalStarted\r\n\ttype \u003d param(chart_type, \"area\")\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d false\r\n\tshowlegend \u003d false\r\n\tstacked \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dfalse\r\n\t# following overrides the settings above\r\n\t",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2253,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 38,
          "WIDTH": 31,
          "HEIGHT": 8,
          "TITLE": "Users: Total Stopped",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "left",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.total_stopped\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d usersTotalStopped\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats \r\n\tby\u003d[timegroup] \r\n\tusersTotalStopped\u003dAVG(usersTotalStopped)\r\n| chart \r\n\tby\u003d[\"scenario\"] \r\n\tx \u003d timegroup\r\n\ty \u003d usersTotalStopped\r\n\ttype \u003d param(chart_type, \"area\")\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d false\r\n\tshowlegend \u003d false\r\n\tstacked \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dfalse\r\n\t",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2254,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 101,
          "WIDTH": 63,
          "HEIGHT": 34,
          "TITLE": "Statistics by Request With Charts",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#56063d",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": true,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n| global\r\n\tsparkheight\u003d\"150px\"\r\n\tsparkwidth\u003d\"15vw\"\t\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ g(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n\t\"min\"\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\u003davg(\"ok_stdev\")\r\n\t\"p50\"\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n\t\"p99\"\t\u003dperc(\"ok_p99\", 99)\r\n| stats # now make statistics by request and create groups for charts\r\n\tby\u003d[scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n\t\"min\"\t\u003dmin(\"min\")\r\n\t\"mean\"\t\u003davg(\"mean\")\r\n\t\"max\"\t\u003dmax(\"max\")\r\n\t\"stdev\"\t\u003davg(\"stdev\")\r\n\t\"p50\"\t\u003dperc(\"p50\", 50)\r\n\t\"p75\"\t\u003dperc(\"p75\", 75)\r\n\t\"p95\"\t\u003dperc(\"p95\", 95)\r\n\t\"p99\"\t\u003dperc(\"p99\", 99)\r\n\t\"counts\" \u003d records()\r\n\t\"metrics\" \u003d records()\r\n| formatfield\r\n\tmetric\u003d[\r\n\t\t\t  [\u0027css\u0027, \"max-width\", \"25vw\"]\r\n\t\t\t ,[\u0027css\u0027, \"text-wrap\", \"wrap\"]\r\n\t\t\t ,[\u0027css\u0027, \"word-wrap\", \"break-word\"]\r\n\t\t]\r\n\t\t\t\r\n\tfields(scenario, metric, \"counts\", \"metrics\")\u003d[\u0027align\u0027, \"right\"]\r\n\t\r\n\t[mean, stdev]\u003d[\u0027decimals\u0027, 1]\r\n\r\n| formatchart \r\n\tfields\u003d[\"counts\"] \t\r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\theight\u003dglobals(\"sparkheight\") \r\n\twidth\u003dglobals(\"sparkwidth\") \r\n\tstacked \u003d true\r\n\tshowaxes\u003dtrue\r\n\tshowlegend \u003d false\r\n\tpointradius\u003d0\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n| formatchart \r\n\tfields\u003d[\"metrics\"] \r\n\tby\u003d[]\r\n\ty\u003d[\"min\", \"mean\", \"p95\", \"max\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\"chart_type\", \"area\") \r\n\theight\u003dglobals(\"sparkheight\") \r\n\twidth\u003dglobals(\"sparkwidth\") \r\n\tshowaxes\u003dtrue\r\n\tshowlegend \u003d false\r\n\tpointradius\u003d0\r\n| sort scenario, metric\t\r\n| display \r\n\tas\u003dtable \r\n\tsizes \u003d [10, 25, 50, 100]\r\n\tdefaultsize\u003d10\r\n\tsettings\u003d{stickyheader: true}",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2255,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 31,
          "Y": 12,
          "WIDTH": 32,
          "HEIGHT": 18,
          "TITLE": "Overall Response Time",
          "TITLE_LINK": null,
          "TITLE_INFO": "The average response time of all requests with status OK.",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, metric\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"min\"\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\u003davg(\"ok_stdev\")\r\n\t\"p50\"\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n\t\"p99\"\t\u003dperc(\"ok_p99\", 99)\r\n| chart \r\n\tfields\u003d[\"counts\"] \t\r\n\ty\u003d[\"min\", \"mean\", \"p95\", \"max\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dfalse\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2256,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 31,
          "Y": 30,
          "WIDTH": 32,
          "HEIGHT": 8,
          "TITLE": "Requests By OK/KO",
          "TITLE_LINK": null,
          "TITLE_INFO": "Request Count by status Okay and Not Okay",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "left",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| chart \r\n\tfields\u003d[\"counts\"] \t\r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d param(chart_type, \"area\")\r\n\tpointradius\u003d0 \r\n\tshowaxes \u003d false\r\n\tshowlegend \u003d false\r\n\ttension\u003d0\r\n\tmultichart\u003dfalse\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2257,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 144,
          "WIDTH": 63,
          "HEIGHT": 36,
          "TITLE": "Compared Statistics",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#062d56",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": true,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| meta name \u003d \"initialization\"\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tcompare_to \u003d object(\r\n\t\t\t\t\t \u0027earliest\u0027, earliest()\r\n\t\t\t\t\t,\u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n;\r\n| meta\r\n\ttimerange \u003d \r\n \t\tif( \r\n \t\t\tp(\u0027compare_timeframe\u0027) !\u003d \"timepicker\"\r\n\t        , tojson( p(\u0027compare_timeframe\u0027) )\r\n\t        ,  tojson( p(\u0027compare_to\u0027) )\r\n\t        ,\r\n\t      )\r\n###################################################\r\n# Fetch Data\r\n###################################################\t\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ m(\u0027timerange\u0027).latest +`\r\n\t\t  AND time \u003e\u003d `+ m(\u0027timerange\u0027).earliest +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n\t\"min\"\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\u003davg(\"ok_stdev\")\r\n\t\"p50\"\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n\t\"p99\"\t\u003dperc(\"ok_p99\", 99)\r\n\r\n;\r\n###################################################\r\n# Mimic Previous\r\n###################################################\t\r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t)\r\n| meta\r\n\ttimerange \u003d object(\r\n\t\t\t\t   \u0027earliest\u0027, earliest()\r\n\t\t\t\t , \u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n| mimic\r\n;\r\n###################################################\r\n# Compare Result\r\n###################################################\t\r\n| resultcompare\r\n\tby\u003d[scenario, metric]\r\n\tpercentformat \u003d [[\u0027percent\u0027, $threshold_good$, $threshold_bad$, \"bg\", \"cfw-gray\"], [align, center]]\r\n| formatfield\r\n\trequest\u003d[\r\n\t\t\t  [\u0027css\u0027, \"max-width\", \"20vw\"]\r\n\t\t\t ,[\u0027css\u0027, \"text-wrap\", \"wrap\"]\r\n\t\t\t ,[\u0027css\u0027, \"word-wrap\", \"break-word\"]\r\n\t\t]\r\n\t\t\t\r\n\tfields(scenario, metric, \"counts\", \"metrics\")\u003d[\u0027align\u0027, \"right\"]\r\n\t[mean, stdev]\u003d[\u0027decimals\u0027, 1]\r\n| display \r\n\tas\u003dtable\r\n\tdownload\u003dtrue\r\n\tsettings\u003d{stickyheader: true}\r\n| resultremove \"initialization\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2258,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_parameter",
          "X": 0,
          "Y": 135,
          "WIDTH": 63,
          "HEIGHT": 9,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#062d56",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "description": "Compare the data selected with this time range picker (A), to the data shown above, selected with the dashboards time range picker (B). Preferably this time range you choose here should be earlier than the one selected for the dashboard. Thresholds are in percentages.",
            "JSON_PARAMETERS": {
              "171": "compare_to",
              "172": "threshold_good",
              "173": "threshold_bad",
              "214": "boxplot_relative",
              "1114": "compare_timeframe"
            },
            "addtotop": false,
            "showbutton": true,
            "buttonlabel": "Compare",
            "checkpassword": false,
            "password": null,
            "JSON_AFFECTED_WIDGETS": {
              "2257": "Compared Statistics",
              "2263": "Compared Boxplots",
              "2640": "Compare Test Settings"
            },
            "load_previous_values": true
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2259,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 57,
          "Y": 6,
          "WIDTH": 6,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#003b4d",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Percentile Chart",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d -1\r\n\tinterval\u003d1\r\n\tinterval_unit\u003d\u0027d\u0027\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d \"area\"\r\n| global\r\n\tcharttype \u003d tojson(param(\"chart_settings\", {})).charttype\r\n\tsparktype\u003d case( \r\n\t\t\t\t\t(globals(charttype) ~\u003d \u0027.*area\u0027), \"sparkarea\"\r\n\t\t\t\t\t, (globals(charttype) ~\u003d \u0027.*bar\u0027), \"sparkbar\"\r\n\t\t\t\t\t, (globals(charttype) ~\u003d \u0027.*line\u0027), \"sparkline\"\r\n\t\t\t\t\t, true, \"sparkarea\"\r\n\t\t\t\t)\r\n\tsparkheight\u003d\"75px\"\r\n\tsparkwidth\u003d\"17vw\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta name\u003d\"data\"\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, metric\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_p95\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t`\r\n;\r\n#####################################\r\n# MIN\r\n| resultcopy \t\"data\"\r\n| meta \t\t\tname \u003d \"ok_min\"\r\n| percentiles   PERC \u003d meta(name)\r\n| set \t\t\tPERC \u003d ceil(PERC)\r\n| stats\t\t\tby\u003d[PERC] meta(name) \u003d AVG( \"ok_min\" )\r\n| keep PERC, meta(name)\r\n;\r\n#####################################\r\n# AVG\r\n| resultcopy \t\"data\"\r\n| meta \t\t\tname \u003d \"ok_mean\"\r\n| percentiles   PERC \u003d meta(name)\r\n| set \t\t\tPERC \u003d ceil(PERC)\r\n| stats\t\t\tby\u003d[PERC] meta(name) \u003d AVG( \"ok_mean\" )\r\n| keep PERC, meta(name)\r\n;\r\n#####################################\r\n# P95\r\n| resultcopy \t\"data\"\r\n| meta \t\t\tname \u003d \"ok_p95\"\r\n| percentiles   PERC \u003d meta(name)\r\n| set \t\t\tPERC \u003d ceil(PERC)\r\n| stats\t\t\tby\u003d[PERC] meta(name) \u003d AVG( \"ok_p95\" )\r\n| keep PERC, meta(name)\r\n;\r\n#####################################\r\n# MAX\r\n| resultcopy \t\"data\"\r\n| meta \t\t\tname \u003d \"ok_max\"\r\n| percentiles   PERC \u003d meta(name)\r\n| set \t\t\tPERC \u003d ceil(PERC)\r\n| stats\t\t\tby\u003d[PERC] meta(name) \u003d AVG( \"ok_max\" )\r\n| keep PERC, meta(name)\r\n;\r\n\r\n\r\n#####################################\r\n# Join\r\n| meta name \u003d \"INDEX\"\r\n| source empty records \u003d 100\r\n| set PERC \u003d count() + 1\r\n;\r\n| resultjoin on\u003dPERC join\u003d\"right\" # join MIN\r\n;\r\n| resultjoin on\u003dPERC join\u003d\"right\"  # join AVG\r\n;\r\n| resultjoin on\u003dPERC join\u003d\"right\"  # join P95\r\n;\r\n| resultjoin on\u003dPERC join\u003d\"right\"  # join MAX\r\n| resultremove \"data\"\r\n| rename PERC \u003d Percentile\r\n| chart \r\n\ty\u003d[\"ok_min\", \"ok_mean\", \"ok_p95\", \"ok_max\"]\t\r\n\tx\u003dPercentile\r\n\ttype\u003d\"line\"\r\n\tpointradius\u003d2\r\n\tspangaps\u003dtrue\r\n\txtype\u003dlinear\r\n\txlabel \u003d \"Percentile\"\r\n\tylabel \u003d \"Response Time\"\r\n\t\r\n\t\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2260,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 46,
          "WIDTH": 63,
          "HEIGHT": 21,
          "TITLE": "Tests Settings During Selected Timeframe",
          "TITLE_LINK": null,
          "TITLE_INFO": "Shows all settings from all the tests. Coloring on time column as grouping for same time.",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id)\r\n\tquery\u003d `\r\n\t\tSELECT *\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_testsettings\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t`\r\n| sort time reverse \u003d true\r\n| set \r\n\thue \u003d (time / 1000) % 255\r\n\ttime \u003d timeformat(\"yyyy-MM-dd HH:mm\", time)\r\n\tendtime \u003d timeformat(\"yyyy-MM-dd HH:mm\", endtime)\r\n| formatcss fields\u003d[time] style\u003d \"background-color: hsla(\"+hue+\",66%,40%, 1.0);\"\r\n| remove execid, hue\r\n| rename pacingseconds \u003d pacing\r\n| display menu\u003dbutton settings\u003d{stickyheader: true}",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2261,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 31,
          "Y": 38,
          "WIDTH": 32,
          "HEIGHT": 8,
          "TITLE": "Requests By Status",
          "TITLE_LINK": null,
          "TITLE_INFO": "Request Count by Status Codes. Code \u0027000\u0027 stand for unknown status code, for example on connection error.",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "left",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "cfw-black",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, metric\r\n\t\t\t, code\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| set count \u003d ok_count + ko_count\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| chart \r\n\tby\u003d[\"code\"]\r\n\ty\u003d[count]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d param(chart_type, \"area\")\r\n\tpointradius\u003d0 \r\n\tshowaxes \u003d false\r\n\tshowlegend \u003d false\r\n\ttension\u003d0\r\n\tmultichart\u003dfalse\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2262,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 67,
          "WIDTH": 63,
          "HEIGHT": 34,
          "TITLE": "Statistics by Request",
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#062d56",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n\t\"min\"\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\u003davg(\"ok_stdev\")\r\n\t\"p50\"\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n\t\"p99\"\t\u003dperc(\"ok_p99\", 99)\r\n| display\r\n\tas\u003dtable\r\n\ttitlefields \u003d [scenario, metric]\r\n\ttitleformat \u003d \"{0} / {1}\"\r\n\tdownload \u003d true\r\n\tstore \u003d true\r\n\tsettings\u003d{stickyheader: true}\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2263,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 180,
          "WIDTH": 63,
          "HEIGHT": 36,
          "TITLE": "Compared Boxplots",
          "TITLE_LINK": null,
          "TITLE_INFO": "MedianDiff colors are set by your threshold settings. Boxplot colors indicate closeness of median(white Line) to the high value(right side of box). The max value used in the box plots is 95th percentile to ignore extreme outliers.",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#360656",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": true,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| meta name \u003d \"initialization\"\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tboxplot_relative \u003d true\r\n\tcompare_to \u003d object(\r\n\t\t\t\t\t \u0027earliest\u0027, earliest()\r\n\t\t\t\t\t,\u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n;\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\t\u0027name\u0027 \u003d \"A\"\r\n\ttimerange \u003d \r\n \t\tif( \r\n \t\t\tp(\u0027compare_timeframe\u0027) !\u003d \"timepicker\"\r\n\t        , tojson( p(\u0027compare_timeframe\u0027) )\r\n\t        ,  tojson( p(\u0027compare_to\u0027) )\r\n\t      )\r\n\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p25\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ meta(\u0027timerange\u0027).latest +`\r\n\t\t  AND time \u003e\u003d `+ meta(\u0027timerange\u0027).earliest +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\" , groups +\" / \", \"\") + metric\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[metric] \r\n\t(\"ok_count_\"+m(name))\t\u003dsum(\"ok_count\")\r\n\t(\"ko_count_\"+m(name))\t\u003dsum(\"ko_count\")\r\n\t(\"min_\"+m(name))\t\t\u003dmin(\"ok_min\")\r\n\t(\"mean_\"+m(name))\t\t\u003davg(\"ok_mean\")\r\n\t(\"max_\"+m(name))\t\t\u003dmax(\"ok_max\")\r\n\t(\"stdev_\"+m(name))\t\t\u003davg(\"ok_stdev\")\r\n\t(\"p25_\"+m(name))\t\t\u003dperc(\"ok_p25\", 25)\r\n\t(\"p50_\"+m(name))\t\t\u003dperc(\"ok_p50\", 50)\r\n\t(\"p75_\"+m(name))\t\t\u003dperc(\"ok_p75\", 75)\r\n\t(\"p95_\"+m(name))\t\t\u003dperc(\"ok_p95\", 95)\r\n\t(\"p99_\"+m(name))\t\t\u003dperc(\"ok_p99\", 99)\r\n;\r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t)\r\n| meta\r\n\t\u0027name\u0027 \u003d \"B\"\r\n\ttimerange \u003d object(\r\n\t\t\t\t   \u0027earliest\u0027, earliest()\r\n\t\t\t\t , \u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n| mimic\r\n;\r\n| resultjoin on\u003dmetric\r\n| sort metric # sort by INDEX\r\n| rename \r\n\tmetric \u003d Metric\r\n\tok_count_A \u003d Count_A\r\n\tok_count_B \u003d Count_B \r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot_A\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min_A\"\r\n\tlow \t \u003d \"p25_A\"\r\n\tmedian \t \u003d \"p50_A\"\r\n\thigh \t \u003d \"p75_A\"\r\n\tmax \t \u003d \"p95_A\"\r\n\twidth \t \u003d \"30vw\"\r\n| set\r\n\tMedianDiff \u003d (\"p50_B\" / \"p50_A\") * 100 - 100 # between the two timeframes\r\n\tCountDiff \u003d (\"Count_B\" / \"Count_A\") * 100 - 100 # between the two timeframes\r\n\tmedianOffsetPerc \u003d (\"p50_B\" - \"p25_B\") / (\"p75_B\" - \"p25_B\") * 100 # in the dashboard timeframe\r\n\t\r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot_B\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min_B\"\r\n\tlow \t \u003d \"p25_B\"\r\n\tmedian \t \u003d \"p50_B\"\r\n\thigh \t \u003d \"p75_B\"\r\n\tmax \t \u003d \"p95_B\"\r\n\twidth \t \u003d \"30vw\"\r\n\tcolor\t \u003d case(\r\n\t\t  ( medianOffsetPerc \u003e 90 ), \"red\"\r\n\t\t, ( medianOffsetPerc \u003e 80 ), \"orange\"\r\n\t\t, ( medianOffsetPerc \u003e 70 ), \"yellow\"\r\n\t\t, ( medianOffsetPerc \u003e 60 ), \"limegreen\"\r\n\t\t, true, \"green\"\r\n\t)\r\n| keep Metric, Count_A, Count_B, CountDiff, Boxplot_A, MedianDiff, Boxplot_B\r\n| formatfield\r\n\t[CountDiff, MedianDiff] \u003d [\u0027percent\u0027, $threshold_good$, $threshold_bad$, \"bg\", \"\"]\r\n| display settings\u003d{stickyheader: true}\r\n| resultremove \"initialization\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2264,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Active",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Number of Active Users by Scenario\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.active\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d activeUsers\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats by\u003d[timegroup, scenario] activeUsers\u003dAVG(activeUsers)\r\n| chart \r\n\tby\u003d[\"scenario\"] \r\n\ttype \u003d param(chart_type)\r\n\tx\u003d timegroup\r\n\ty\u003d activeUsers\r\n\tshowaxes\u003dtrue\r\n\tshowlegend\u003dtrue\r\n\tstacked\u003dtrue\r\n\tpointradius\u003d1\r\n\tmultichart \u003d true",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2265,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 33,
          "Y": 6,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Mean",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Mean Response Time by Scenario\"\r\n\tdescription \u003d \"Shows the mean response time by scenario for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"mean\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2266,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_label",
          "X": 10,
          "Y": 6,
          "WIDTH": 8,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": null,
          "TITLE_ALIGN": null,
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": null,
          "FGCOLOR": null,
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "label": "Charts By Scenario:",
            "direction": "Left to Right",
            "link": null,
            "newwindow": true,
            "sizefactor": "1"
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2267,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 30,
          "Y": 6,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Min",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Minimum Response Time by Scenario\"\r\n\tdescription \u003d \"Shows the minimum response time by scenario for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_min\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"min\"\t\u003dmin(\"ok_min\")\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"min\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2268,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 36,
          "Y": 6,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "P95",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"95th Percentile Response Time by Scenario\"\r\n\tdescription \u003d \"Shows the 95th percentile response time by scenario for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_p95\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"p95\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2269,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 39,
          "Y": 6,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Max",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Maximum Response Time by Scenario\"\r\n\tdescription \u003d \"Shows the maximum response time by scenario for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_max\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"max\"\t\u003dmax(\"ok_max\")\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"max\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2270,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_label",
          "X": 10,
          "Y": 9,
          "WIDTH": 8,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": null,
          "TITLE_ALIGN": null,
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": null,
          "FGCOLOR": null,
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "label": "Charts By Metric:",
            "direction": "Left to Right",
            "link": null,
            "newwindow": true,
            "sizefactor": "1"
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2271,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 18,
          "Y": 6,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Count OK",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests OK by Scenario\"\r\n\tdescription \u003d \"Number of requests by scenario. List only includes scenarios that have at least one OK request.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tcolors\u003d[\"limegreen\"]",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2272,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 22,
          "Y": 6,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Count KO",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests KO by Scenario\"\r\n\tdescription \u003d \"Number of KO requests by scenario. List only includes scenarios that have at least one KO request.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ko_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| sort scenario\r\n| chart \r\n\tby\u003d[\"scenario\"] \t\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"300px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tcolors\u003d[\"red\"]",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2273,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 18,
          "Y": 9,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Count OK",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests OK by Metric\"\r\n\tdescription \u003d \"Number of requests by metric. List only includes metrics that have at least one OK request.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d3\r\n\tcolors\u003d[\"limegreen\"]",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2274,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 22,
          "Y": 9,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Count KO",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests KO by Metric\"\r\n\tdescription \u003d \"Number of KO requests by metric. List only includes metrics that have at least one KO request.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ko_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d3\r\n\tcolors\u003d[\"red\"]",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2275,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 30,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Min",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Minimum Response Time by Metric\"\r\n\tdescription \u003d \"Shows the minimum response time by metric for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_min\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"min\"\t\u003d min(\"ok_min\")\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"min\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d2",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2276,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 33,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Mean",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Mean Response Time by Metric\"\r\n\tdescription \u003d \"Shows the mean response time by metric for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"mean\"\t\u003davg(\"ok_mean\")\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"mean\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d2",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2277,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 36,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "P95",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"95th Percentile Response Time by Metric\"\r\n\tdescription \u003d \"Shows the 95th percentile response time by metric for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_p95\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"p95\"\t\u003dperc(\"ok_p95\", 95)\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"p95\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d2",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2278,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 39,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Max",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Maximum Response Time by Metric\"\r\n\tdescription \u003d \"Shows the maximum response time by Metric for all responses that are OK.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_max\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest()+`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"max\" \u003d max(\"ok_max\", 95)\r\n| sort scenario metric\r\n| chart \r\n\tby\u003d[scenario, metric] \t\r\n\ty\u003d[\"max\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003dparam(\u0027chart_type\u0027)\r\n\theight \u003d if(contains([\"pie\", \"doughnut\", \"polar\", \"radar\"], param(\u0027chart_type\u0027)), \"100%\", \"200px\")\r\n\tpointradius\u003d0 \r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmulticharttitle\u003dfalse\r\n\tmultichartcolumns\u003d2",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2279,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 42,
          "Y": 9,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Boxplots",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| meta name \u003d \"initialization\"\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tboxplot_relative \u003d true\r\n\t\r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Boxplots by Metric\"\r\n\tdescription \u003d \"Shows boxplot statistics and charts by metric. \r\n\t\t\t\tFirst boxplot column displays a regular boxplot. \r\n\t\t\t\tSecond boxplot column displays the boxplots relative to all other boxplots.\r\n\t\t\t\tBoxplot is colored by the position of the median (white line) inside of the box.\r\n\t\t\t\tThe closer it is to the right side, the more red it turns.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p25\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\" , groups +\" / \", \"\") + metric\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[metric] \r\n\t\"count\"\t\t\u003dsum(\"ok_count\")\r\n\t\"min\"\t\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\t\u003davg(\"ok_stdev\")\r\n\t\"p25\" \t\t\u003dperc(\"ok_p25\", 25)\r\n\t\"p50\"\t\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\t\u003dperc(\"ok_p95\", 95)\r\n| set\r\n\trange \u003d max - min\r\n\tIQR \u003d \"p75\" - \"p25\"\r\n\tmedianOffsetPerc \u003d (\"p50\" - \"p25\") / (\"p75\" - \"p25\") * 100 \r\n\t\r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min\"\r\n\tlow \t \u003d \"p25\"\r\n\tmedian \t \u003d \"p50\"\r\n\thigh \t \u003d \"p75\"\r\n\tmax \t \u003d \"p95\"\r\n\twidth \t \u003d \"10vw\"\r\n\trelative \u003d false\r\n\tcolor\t \u003d case(\r\n\t\t  ( medianOffsetPerc \u003e 90 ), \"red\"\r\n\t\t, ( medianOffsetPerc \u003e 80 ), \"orange\"\r\n\t\t, ( medianOffsetPerc \u003e 70 ), \"yellow\"\r\n\t\t, ( medianOffsetPerc \u003e 60 ), \"limegreen\"\r\n\t\t, true, \"green\"\r\n\t)\r\n\r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot Relative\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min\"\r\n\tlow \t \u003d \"p25\"\r\n\tmedian \t \u003d \"p50\"\r\n\thigh \t \u003d \"p75\"\r\n\tmax \t \u003d \"p95\"\r\n\twidth \t \u003d \"20vw\"\r\n\tcolor\t \u003d case(\r\n\t\t  ( medianOffsetPerc \u003e 90 ), \"red\"\r\n\t\t, ( medianOffsetPerc \u003e 80 ), \"orange\"\r\n\t\t, ( medianOffsetPerc \u003e 70 ), \"yellow\"\r\n\t\t, ( medianOffsetPerc \u003e 60 ), \"limegreen\"\r\n\t\t, true, \"green\"\r\n\t)\r\n\r\n| sort metric\r\n| remove medianOffsetPerc \r\n| display \r\n\tdownload \u003d true\r\n\tsticky \u003d true\r\n| resultremove \"initialization\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2280,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 42,
          "Y": 6,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Boxplots",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| meta name \u003d \"initialization\"\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tboxplot_relative \u003d true\r\n\t\r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Boxplots by Scenario\"\r\n\tdescription \u003d \"Shows boxplot statistics and charts by scenario. \r\n\t\t\t\tFirst boxplot column displays a regular boxplot. \r\n\t\t\t\tSecond boxplot column displays the boxplots relative to all other boxplots.\r\n\t\t\t\tBoxplot is colored by the position of the median (white line) inside of the box.\r\n\t\t\t\tThe closer it is to the right side, the more red it turns.\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, ok_count\r\n\t\t\t, ok_min\r\n\t\t\t, ok_max\r\n\t\t\t, ok_mean\r\n\t\t\t, ok_stdev\r\n\t\t\t, ok_p25\r\n\t\t\t, ok_p50\r\n\t\t\t, ok_p75\r\n\t\t\t, ok_p95\r\n\t\t\t, ok_p99\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND ok_count IS NOT NULL\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t`\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario] \r\n\t\"count\"\t\t\u003dsum(\"ok_count\")\r\n\t\"min\"\t\t\u003dmin(\"ok_min\")\r\n\t\"mean\"\t\t\u003davg(\"ok_mean\")\r\n\t\"max\"\t\t\u003dmax(\"ok_max\")\r\n\t\"stdev\"\t\t\u003davg(\"ok_stdev\")\r\n\t\"p25\" \t\t\u003dperc(\"ok_p25\", 25)\r\n\t\"p50\"\t\t\u003dperc(\"ok_p50\", 50)\r\n\t\"p75\"\t\t\u003dperc(\"ok_p75\", 75)\r\n\t\"p95\"\t\t\u003dperc(\"ok_p95\", 95)\r\n| set\r\n\trange \u003d max - min\r\n\tIQR \u003d \"p75\" - \"p25\"\r\n\tmedianOffsetPerc \u003d (\"p50\" - \"p25\") / (\"p75\" - \"p25\") * 100 \r\n\t\r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min\"\r\n\tlow \t \u003d \"p25\"\r\n\tmedian \t \u003d \"p50\"\r\n\thigh \t \u003d \"p75\"\r\n\tmax \t \u003d \"p95\"\r\n\twidth \t \u003d \"10vw\"\r\n\trelative \u003d false\r\n\tcolor\t \u003d case(\r\n\t\t  ( medianOffsetPerc \u003e 90 ), \"red\"\r\n\t\t, ( medianOffsetPerc \u003e 80 ), \"orange\"\r\n\t\t, ( medianOffsetPerc \u003e 70 ), \"yellow\"\r\n\t\t, ( medianOffsetPerc \u003e 60 ), \"limegreen\"\r\n\t\t, true, \"green\"\r\n\t)\r\n\r\n| formatboxplot\r\n\tfield \t \u003d \"Boxplot Relative\"\r\n\trelative \u003d param(boxplot_relative)\r\n\tmin \t \u003d \"min\"\r\n\tlow \t \u003d \"p25\"\r\n\tmedian \t \u003d \"p50\"\r\n\thigh \t \u003d \"p75\"\r\n\tmax \t \u003d \"p95\"\r\n\twidth \t \u003d \"20vw\"\r\n\tcolor\t \u003d case(\r\n\t\t  ( medianOffsetPerc \u003e 90 ), \"red\"\r\n\t\t, ( medianOffsetPerc \u003e 80 ), \"orange\"\r\n\t\t, ( medianOffsetPerc \u003e 70 ), \"yellow\"\r\n\t\t, ( medianOffsetPerc \u003e 60 ), \"limegreen\"\r\n\t\t, true, \"green\"\r\n\t)\r\n\t\r\n| sort metric\r\n| remove medianOffsetPerc \r\n| display \r\n\tdownload \u003d true\r\n\tsticky \u003d true\r\n| resultremove \"initialization\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2281,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 3,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Started",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Number of Started Users by Scenario\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.total_started\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d startedUsers\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats \r\n\tby\u003d[timegroup, scenario] \r\n\tstartedUsers\u003dAVG(startedUsers)\r\n| chart \r\n\tby\u003d[\"scenario\"] \r\n\ttype \u003d param(chart_type)\r\n\tx\u003d timegroup\r\n\ty\u003d startedUsers\r\n\tshowaxes\u003dtrue\r\n\tshowlegend\u003dtrue\r\n\tstacked\u003dtrue\r\n\tpointradius\u003d1\r\n\tmultichart \u003d true",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2282,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 6,
          "Y": 9,
          "WIDTH": 3,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Stopped",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| meta\r\n\tname \u003d \"Number of Stopped Users by Scenario\"\r\n\ttitle \u003d true\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, metric\r\n\t\t\t, ok_mean\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027USR\u0027\r\n\t\t  AND metric \u003d \u0027users.total_stopped\u0027\r\n\t`\r\n| sort time\r\n| rename ok_mean \u003d stoppedUsers\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n| stats \r\n\tby\u003d[timegroup, scenario] \r\n\tstoppedUsers\u003dAVG(stoppedUsers)\r\n| chart \r\n\tby\u003d[\"scenario\"] \r\n\ttype \u003d param(chart_type)\r\n\tx\u003d timegroup\r\n\ty\u003d stoppedUsers\r\n\tshowaxes\u003dtrue\r\n\tshowlegend\u003dtrue\r\n\tstacked\u003dtrue\r\n\tpointradius\u003d1\r\n\tmultichart \u003d true",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2283,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_label",
          "X": 0,
          "Y": 6,
          "WIDTH": 9,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": null,
          "TITLE_ALIGN": null,
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": null,
          "FGCOLOR": null,
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "label": "User Scenario Charts:",
            "direction": "Left to Right",
            "link": null,
            "newwindow": true,
            "sizefactor": "1"
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2504,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 26,
          "Y": 9,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "OK vs KO",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n\tmultidisplay \u003d true\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n| meta name \u003d \"fetchData\"\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n;\r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests Total OK vs KO\"\r\n\tdescription \u003d \"Overall Requests OK vs KO count, not grouped by request or scenario.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 30\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n\r\n| chart \r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos\u003dbottom\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n; \r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests Total OK vs KO\"\r\n\tdescription \u003d \"Overall Requests OK vs KO count over time, not grouped by request or scenario.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 70\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| chart \r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n; \r\n###################################################\r\n# Raw Data Table\r\n###################################################\r\n| meta\r\n\tname \u003d \"Statistics Table\"\r\n\tdescription \u003d \"The raw statistics for investigation or exporting.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| display \r\n\tas\u003dtable\r\n\tdefaultsize\u003d10\r\n\tdownload \u003d true\r\n\tstore \u003d true\r\n\t\r\n;\r\n###################################################\r\n# OK Doughnut Chart\r\n###################################################\r\n| meta\r\n\tname \u003d \"Top 10 Request OK Count By Metric\"\r\n\tdescription \u003d \"Shows the Top 10 requests by metric with the highest OK count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ok_count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, metric]\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos \u003d left\r\n; \r\n\r\n###################################################\r\n# KO Doughnut Chart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Top 10 Request Count KO By Metric\"\r\n\tdescription \u003d \"Shows the Top 10 requests by metric with the highest KO count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric] \r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ko_count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, metric]\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# OK Multichart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Requests OK vs KO By Metric\"\r\n\tdescription \u003d \"Requests OK vs KO count by Metric over time as stacked bar charts.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| chart \r\n\tby\u003d [scenario, metric]\r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"300px\"\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmultichartby\u003d[scenario, metric]\r\n\tmultichartcolumns\u003d3\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n\r\n###################################################\r\n# Remove Data\r\n###################################################\r\n| resultremove \"fetchData\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2536,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 26,
          "Y": 6,
          "WIDTH": 4,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "OK vs KO",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n\tmultidisplay \u003d true\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n| meta name \u003d \"fetchData\"\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n;\r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests Total OK vs KO\"\r\n\tdescription \u003d \"Overall Requests OK vs KO count, not grouped by request or scenario.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 30\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n\r\n| chart \r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos\u003dbottom\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n; \r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Requests Total OK vs KO\"\r\n\tdescription \u003d \"Overall Requests OK vs KO count over time, not grouped by request or scenario.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 70\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| chart \r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n; \r\n###################################################\r\n# Raw Data Table\r\n###################################################\r\n| meta\r\n\tname \u003d \"Statistics Table\"\r\n\tdescription \u003d \"The statistics for investigation or exporting.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| display \r\n\tas\u003dtable\r\n\tdefaultsize\u003d10\r\n\tdownload \u003d true\r\n\tstore \u003d true\r\n\t\r\n;\r\n###################################################\r\n# OK Doughnut Chart\r\n###################################################\r\n| meta\r\n\tname \u003d \"Top 10 Request OK Count By Scenario\"\r\n\tdescription \u003d \"Shows the Top 10 requests by scenario with the highest OK count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ok_count\"\r\n\tlabel\u003d\"scenario\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario]\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos \u003d left\r\n; \r\n\r\n###################################################\r\n# KO Doughnut Chart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Top 10 Request Count KO By Scenario\"\r\n\tdescription \u003d \"Shows the Top 10 requests by scenario with the highest KO count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario] \r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ko_count\"\r\n\tlabel\u003d\"scenario\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario]\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# OK Multichart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Requests OK vs KO By Scenario\"\r\n\tdescription \u003d \"Requests OK vs KO count by scenario over time as stacked bar charts.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario] \r\n\t\"ok_count\"\t\u003dsum(\"ok_count\")\r\n\t\"ko_count\"\t\u003dsum(\"ko_count\")\r\n| chart \r\n\tby\u003d [scenario]\r\n\ty\u003d[\"ok_count\", \"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"300px\"\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmultichartby\u003d[scenario]\r\n\tmultichartcolumns\u003d3\r\n\tcolors \u003d [\"limegreen\", \"red\"]\r\n\r\n###################################################\r\n# Remove Data\r\n###################################################\r\n| resultremove \"fetchData\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2568,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 46,
          "Y": 9,
          "WIDTH": 5,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Status Codes",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n\tmultidisplay \u003d true\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n| meta name \u003d \"fetchData\"\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, code\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, code\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| set count \u003d ok_count + ko_count\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n;\r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Total Count by Status Code\"\r\n\tdescription \u003d \"Overall count by status codes, not grouped by scenario or metric.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 30\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n\r\n| chart \r\n\tby\u003d[code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos\u003dbottom\r\n; \r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Count by Status Code Chart\"\r\n\tdescription \u003d \"Overall count by status code over time, not grouped by scenario or request.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 70\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| chart \r\n\tby\u003d[code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# Raw Data Table\r\n###################################################\r\n| meta\r\n\tname \u003d \"Statistics Table\"\r\n\tdescription \u003d \"The raw statistics for investigation or exporting.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| display \r\n\tas\u003dtable\r\n\tdefaultsize\u003d10\r\n\tdownload \u003d true\r\n\tstore \u003d true\r\n\t\r\n;\r\n###################################################\r\n# OK Doughnut Chart\r\n###################################################\r\n| meta\r\n\tname \u003d \"Top 10 OK Status Codes By Metric\"\r\n\tdescription \u003d \"Shows the Top 10 status codes by metric with the highest OK count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric, code] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ok count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, metric, code]\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos \u003d left\r\n; \r\n\r\n###################################################\r\n# KO Doughnut Chart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Top 10 KO Status Codes By Metric\"\r\n\tdescription \u003d \"Shows the Top 10 status codes by metric with the highest KO count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, metric, code] \r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ko_count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, metric, code]\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# OK Multichart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Status Codes By Metric\"\r\n\tdescription \u003d \"Status Codes by Metric over time as stacked bar charts.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| chart \r\n\tby\u003d [scenario, metric, code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"300px\"\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmultichartby\u003d[scenario, metric]\r\n\tmultichartcolumns\u003d3\r\n\r\n###################################################\r\n# Remove Data\r\n###################################################\r\n| resultremove \"fetchData\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2600,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 46,
          "Y": 6,
          "WIDTH": 5,
          "HEIGHT": 3,
          "TITLE": null,
          "TITLE_LINK": null,
          "TITLE_INFO": null,
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "null",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": false,
          "BUTTON_POPUP": true,
          "BUTTON_LABEL": "Status Codes",
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tchart_type\u003d\"area\"\r\n\t\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n\tmultidisplay \u003d true\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t) \r\n| meta name \u003d \"fetchData\"\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id) \r\n\tquery\u003d `\r\n\t\tSELECT \r\n\t\t\t  time\r\n\t\t\t, simulation\r\n\t\t\t, scenario\r\n\t\t\t, groups\r\n\t\t\t, metric\r\n\t\t\t, code\r\n\t\t\t, ok_count\r\n\t\t\t, ko_count\r\n\t\t\t, code\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_stats\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ earliest() +`\r\n\t\t  AND simulation LIKE \u0027%`+ globals(\"finalSimulation\") +`%\u0027\r\n\t\t  AND type \u003d \u0027REQ\u0027\r\n\t\t  \r\n\t`\r\n| set metric \u003d if( groups !\u003d \"\", groups +\" / \", \"\") + metric\r\n| set count \u003d ok_count + ko_count\r\n| crates\r\n\tname\u003dtimegroup\r\n\tby\u003dtime\r\n\ttype\u003dtime \r\n\tstep\u003dparam(\u0027interval\u0027, interval()) \r\n\ttimeunit\u003dparam(\u0027interval_unit\u0027, intervalunit())\r\n;\r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Total Count by Status Code\"\r\n\tdescription \u003d \"Overall count by status codes, not grouped by scenario or metric.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 30\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n\r\n| chart \r\n\tby\u003d[code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos\u003dbottom\r\n; \r\n###################################################\r\n# Doughnut Requests Total OK vs KO\r\n###################################################\r\n| meta\r\n\tname \u003d \"Count by Status Code Chart\"\r\n\tdescription \u003d \"Overall count by status code over time, not grouped by scenario or request.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 70\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| chart \r\n\tby\u003d[code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"400px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# Raw Data Table\r\n###################################################\r\n| meta\r\n\tname \u003d \"Statistics Table\"\r\n\tdescription \u003d \"The raw statistics for investigation or exporting.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| display \r\n\tas\u003dtable\r\n\tdefaultsize\u003d10\r\n\tdownload \u003d true\r\n\tstore \u003d true\r\n\t\r\n;\r\n###################################################\r\n# OK Doughnut Chart\r\n###################################################\r\n| meta\r\n\tname \u003d \"Top 10 OK Status Codes By Scenario\"\r\n\tdescription \u003d \"Shows the Top 10 status codes by scenario with the highest OK count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, code] \r\n\t\"ok_count\"\t\u003d sum(\"ok_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ok count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, code]\r\n\ty\u003d[\"ok_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\tlegendpos \u003d left\r\n; \r\n\r\n###################################################\r\n# KO Doughnut Chart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Top 10 KO Status Codes By Scenario\"\r\n\tdescription \u003d \"Shows the Top 10 status codes by scenario with the highest KO count.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 50\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[scenario, code] \r\n\t\"ko_count\"\t\u003d sum(\"ko_count\")\r\n| topN\r\n\tn\u003d10\r\n\tvalue\u003d\"ko_count\"\r\n\tlabel\u003d\"metric\"\r\n\tothers \u003d false\r\n| chart \r\n\tby\u003d [scenario, code]\r\n\ty\u003d[\"ko_count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"doughnut\"\r\n\theight \u003d \"300px\"\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n; \r\n###################################################\r\n# OK Multichart\r\n###################################################\r\n| meta \r\n\tname \u003d \"Status Codes By Scenario\"\r\n\tdescription \u003d \"Status Codes by scenario over time as stacked bar charts.\"\r\n\ttitle \u003d true\r\n\ttitleduration \u003d false\r\n\tmultipercent \u003d 100\r\n| resultcopy name \u003d \"fetchData\"\r\n| stats #reduce data points to timegroup\r\n\tby\u003d[timegroup, scenario, metric, code] \r\n\t\"count\"\t\u003d sum(\"count\")\r\n| chart \r\n\tby\u003d [scenario, code]\r\n\ty\u003d[\"count\"]\t\r\n\tx\u003dtimegroup \r\n\ttype\u003d \"bar\"\r\n\tstacked \u003d true\r\n\theight \u003d \"300px\"\r\n\tpointradius\u003d1\r\n\tshowaxes \u003d true\r\n\tshowlegend \u003d true\r\n\ttension\u003d0\r\n\tmultichart\u003dtrue\r\n\tmultichartby\u003d[scenario]\r\n\tmultichartcolumns\u003d3\r\n\r\n###################################################\r\n# Remove Data\r\n###################################################\r\n| resultremove \"fetchData\"",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        },
        {
          "PK_ID": 2640,
          "FK_ID_DASHBOARD": 838,
          "TYPE": "cfw_widget_queryresults",
          "X": 0,
          "Y": 216,
          "WIDTH": 63,
          "HEIGHT": 23,
          "TITLE": "Compare Test Settings",
          "TITLE_LINK": null,
          "TITLE_INFO": "Shows all settings from all the tests compared between the two timeframes.",
          "TITLE_FONTSIZE": null,
          "TITLE_POSITION": "top",
          "TITLE_ALIGN": "start",
          "CONTENT_FONTSIZE": null,
          "FOOTER": null,
          "BGCOLOR": "#062d56",
          "FGCOLOR": "null",
          "INVISIBLE": false,
          "PAUSE": false,
          "MANUAL_LOAD": false,
          "PARAM_WIDGET_LOAD": true,
          "BUTTON_POPUP": false,
          "BUTTON_LABEL": null,
          "JSON_SETTINGS": {
            "query": "###################################################\r\n# Default Params\r\n###################################################\r\n| meta name \u003d \"initialization\"\r\n| paramdefaults\r\n\tsimulation\u003d\"n/a\"\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n\tcompare_to \u003d object(\r\n\t\t\t\t\t \u0027earliest\u0027, earliest()\r\n\t\t\t\t\t,\u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n###################################################\r\n# Find Final Simulation and TimeFrame\r\n###################################################\r\n| globals\r\n    finalSimulation \u003d if( \r\n    \t\t  p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t\t\t, tojson(p(\u0027timeframe\u0027)).customSimulation\r\n\t\t\t, p(\u0027simulation\u0027, \"n/a\")\r\n\t\t) \r\n;\r\n| meta\r\n\ttimerange \u003d \r\n \t\tif( \r\n \t\t\tp(\u0027compare_timeframe\u0027) !\u003d \"timepicker\"\r\n\t        , tojson( p(\u0027compare_timeframe\u0027) )\r\n\t        ,  tojson( p(\u0027compare_to\u0027) )\r\n\t      )\r\n\t\r\n###################################################\r\n# Fetch Data\r\n###################################################\r\n| source postgres \r\n\tenvironment\u003dparam(database_id)\r\n\tquery\u003d `\r\n\t\tSELECT *\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_testsettings\r\n\t\tWHERE time \u003c\u003d `+ m(\u0027timerange\u0027).latest +`\r\n\t\t  AND time \u003e\u003d `+ m(\u0027timerange\u0027).earliest +`\r\n\t`\r\n| sort time reverse \u003d true\r\n| remove execid, hue\r\n| rename pacingseconds \u003d pacing\r\n| display menu\u003dbutton sticky \u003d true\r\n;\r\n;\r\n###################################################\r\n# Mimic Previous\r\n###################################################\t\r\n| execute if( p(\u0027timeframe\u0027) !\u003d \"timepicker\"\r\n\t, earliestSet(tojson(p(\u0027timeframe\u0027)).earliest )\r\n\t  OR latestSet(tojson(p(\u0027timeframe\u0027)).latest )\r\n\t)\r\n| meta\r\n\ttimerange \u003d object(\r\n\t\t\t\t   \u0027earliest\u0027, earliest()\r\n\t\t\t\t , \u0027latest\u0027, latest()\r\n\t\t\t\t)\r\n| mimic\r\n;\r\n\r\n###################################################\r\n# Compare Result\r\n###################################################\t\r\n| resultcompare\r\n\tby\u003d[scenario]\r\n\tpercentformat \u003d [[\u0027percent\u0027, $threshold_good$, $threshold_bad$, \"bg\", \"cfw-gray\"], [align, center]]\r\n\r\n| formatfield\r\n\trequest\u003d[\r\n\t\t\t  [\u0027css\u0027, \"max-width\", \"20vw\"]\r\n\t\t\t ,[\u0027css\u0027, \"text-wrap\", \"wrap\"]\r\n\t\t\t ,[\u0027css\u0027, \"word-wrap\", \"break-word\"]\r\n\t\t]\r\n\t\t\t\r\n\tfieldsMatching(\"time_A\", \"time_B\")\u003d[\u0027timestamp\u0027, \"yyyy-MM-DD HH:mm:ss\"]\r\n\tfieldsMatching(\"time_Diff\")\u003d[\u0027duration\u0027]\r\n| remove \"simulation_%\" fieldsMatching(\"time_%\")\r\n| move after\u003d\"pacing_%\" fieldsMatching(\"time_\")\r\n| display \r\n\tas\u003dtable\r\n\tdownload\u003dtrue\r\n\tsettings\u003d{stickyheader: true}\r\n| resultremove \"initialization\"\r\n",
            "sampledata": false
          },
          "JSON_TASK_PARAMETERS": {}
        }
      ],
      "parameters": [
        {
          "PK_ID": 2219,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Query Select",
          "PARAM_TYPE": "QUERY_EDITOR",
          "NAME": "timeframe",
          "DESCRIPTION": "The timeframe you want to analyze. Either select one of the tests listed or select \"Use Timeframe Picker\" to select a custom timeframe with the picker above.",
          "VALUE": "| paramdefaults\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n| record\r\n\t[value, label]\r\n\t[\"timepicker\", \"Use Time Picker\"]\r\n;\r\n| source postgres \r\n\tenvironment\u003dp(database_id)\r\n\tquery\u003d `\r\n\t\tSELECT *\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_testsettings\r\n\t`\r\n| sort time reverse \u003d true\r\n| dedup time, simulation\r\n| top 1000 \r\n| set \r\n\tlatestTime \u003d if(endtime !\u003d null, endtime, timeoffset(time, 1, \u0027h\u0027) )\r\n\tvalue \u003d object(\"earliest\", time\r\n\t\t\t\t , \"latest\", latestTime\r\n\t\t\t\t , \"customSimulation\", simulation\r\n\t\t\t\t )\r\n\tlabel \u003d timeformat(\"yyyy-MM-dd HH:mm\", time, true) \r\n\t\t\t+ \" to \" \r\n\t\t\t+ if( endtime !\u003d null\r\n\t\t\t\t, timeformat(\"HH:mm\", latestTime, true) \r\n\t\t\t\t, \"+1 hour\" \r\n\t\t\t\t)\r\n\t\t\t+ \" [\" +simulation +\"]\"\r\n| keep value label\r\n\r\n;\r\n| resultconcat",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": true
        },
        {
          "PK_ID": 2220,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Query Select",
          "PARAM_TYPE": "QUERY_EDITOR",
          "NAME": "simulation",
          "DESCRIPTION": "Used when you select \"Use Custom Timeframe\"",
          "VALUE": "| paramdefaults\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n| source postgres \r\n\tenvironment\u003dp(database_id)\r\n\tquery\u003d `\r\n\t\tSELECT DISTINCT simulation \r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_testsettings\r\n\t\tWHERE time \u003c\u003d `+ latest() +`\r\n\t\t  AND time \u003e\u003d `+ timeOffset(earliest(), -90, \"d\") +`\r\n\t`",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": true
        },
        {
          "PK_ID": 2221,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Postgres Environment",
          "PARAM_TYPE": "SELECT",
          "NAME": "database_id",
          "DESCRIPTION": null,
          "VALUE": "5",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2222,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Text",
          "PARAM_TYPE": "TEXT",
          "NAME": "tableprefix",
          "DESCRIPTION": null,
          "VALUE": "gatlytron",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2223,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Number",
          "PARAM_TYPE": "NUMBER",
          "NAME": "interval",
          "DESCRIPTION": null,
          "VALUE": "15",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2224,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Select",
          "PARAM_TYPE": "VALUE_LABEL",
          "NAME": "interval_unit",
          "DESCRIPTION": null,
          "VALUE": "{\"s\":\"Seconds\",\"m\":\"Minutes\",\"h\":\"Hours\",\"d\":\"Days\"}",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2225,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Chart Types",
          "PARAM_TYPE": "UNMODIFIABLE_TEXT",
          "NAME": "chart_type",
          "DESCRIPTION": null,
          "VALUE": "area",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2226,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Query Select",
          "PARAM_TYPE": "QUERY_EDITOR",
          "NAME": "compare_timeframe",
          "DESCRIPTION": null,
          "VALUE": "| paramdefaults\r\n\tdatabase_id\u003d-1\r\n\ttableprefix\u003d\u0027gatlytron\u0027\r\n| record\r\n\t[value, label]\r\n\t[\"timepicker\", \"Use Compare Time Picker\"]\r\n;\r\n| source postgres \r\n\tenvironment\u003dp(database_id)\r\n\tquery\u003d `\r\n\t\tSELECT *\r\n\t\tFROM ` +param(tableprefix, \u0027gatlytron\u0027) + `_testsettings\r\n\t`\r\n| sort time reverse \u003d true\r\n| dedup time, simulation\r\n| top 1000 \r\n| set \r\n\tlatestTime \u003d if(endtime !\u003d null, endtime, timeoffset(time, 1, \u0027h\u0027) )\r\n\tvalue \u003d object(\"earliest\", time\r\n\t\t\t\t , \"latest\", latestTime\r\n\t\t\t\t , \"customSimulation\", simulation\r\n\t\t\t\t )\r\n\tlabel \u003d timeformat(\"yyyy-MM-dd HH:mm\", time, true) \r\n\t\t\t+ \" to \" \r\n\t\t\t+ if( endtime !\u003d null\r\n\t\t\t\t, timeformat(\"HH:mm\", latestTime, true) \r\n\t\t\t\t, \"+1 hour\" \r\n\t\t\t\t)\r\n\t\t\t+ \" [\" +simulation +\"]\"\r\n| keep value label\r\n\r\n;\r\n| resultconcat",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": true
        },
        {
          "PK_ID": 2227,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Time Range",
          "PARAM_TYPE": "TIMEFRAMEPICKER",
          "NAME": "compare_to",
          "DESCRIPTION": null,
          "VALUE": "{\"offset\":\"30-m\",\"earliest\":null,\"latest\":null,\"clientTimezoneOffset\":0}",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2228,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Number",
          "PARAM_TYPE": "NUMBER",
          "NAME": "threshold_good",
          "DESCRIPTION": null,
          "VALUE": "-15",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2229,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Number",
          "PARAM_TYPE": "NUMBER",
          "NAME": "threshold_bad",
          "DESCRIPTION": null,
          "VALUE": "15",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        },
        {
          "PK_ID": 2230,
          "FK_ID_DASHBOARD": 838,
          "FK_ID_QUERY": null,
          "WIDGET_TYPE": null,
          "LABEL": "Boolean",
          "PARAM_TYPE": "BOOLEAN",
          "NAME": "boxplot_relative",
          "DESCRIPTION": null,
          "VALUE": "TRUE",
          "MODE": "MODE_SUBSTITUTE",
          "IS_MODE_CHANGE_ALLOWED": false,
          "IS_DYNAMIC": false
        }
      ]
    }
  ]
}}